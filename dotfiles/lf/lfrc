# https://github.com/gokcehan/lf/blob/master/doc.md
# :doc command to see docs in lf
# -----------------------------------------------------------------------------
# for lfimg
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# Remove Default bindings
map d
map m
map u
map n
cmd open # prevent leaf nodes from opening on l or <right>

# Basic settings
set hidden false
set ignorecase true
set icons true
set filesep " " # default '\n'

# Basic Functions
map . set hidden!
map <esc> quit
map <enter> $$EDITOR "$f"
cmd q quit
map <a-j> half-down
map <a-k> half-up
map a fn-add
map dd fn-trash
map u $trash-restore
map yy copy
map p paste
map x cut
cmd chmod %{{ chmod +x "$f" }}
cmd run %{{ nohup "$f" > /dev/null 2>&1 & }}
cmd sudoedit ${{ sudoedit "$f" }}
cmd ro ${{ bat "$f" }}

map nn cycle-session-bookmarks -n
map bb cycle-session-bookmarks -b
map mm mark-session-bookmark
map bc %{{ rm -r "$HOME/.config/lf/session-bookmarks/$id" }}
map bl bookmarks-list
map br bookmark-remove
cmd on-quit %{{ rm -r "$HOME/.config/lf/session-bookmarks/$id"}}

cmd bookmark-remove !{{
    bmDir="$HOME/.config/lf/session-bookmarks"

    if [ ! -d "$bmDir/$id" ]; then
        echo "No current bookmarks"
        exit 0;
    fi

    currLine="1"
    while read line; do
        echo "$currLine: $line"
        ((++currLine))
    done < "$bmDir/$id/bookmarks"
    totalBookmarks="$((currLine - 1))"

    printf "Enter bookmark number to remove: "
    read toRemove

    id="$id"
    newList=""
    currLine="0"
    while read line; do
        if ((currLine + 1 != toRemove)); then
            if ((currLine == totalBookmarks - 1)); then
                newList="$newList$line"
            else
                newList="$newList$line"$'\n'
            fi
        fi
        ((++currLine))
    done < "$bmDir/$id/bookmarks"

    echo "$newList" > "$bmDir/$id/bookmarks"
}}

cmd mark-session-bookmark %{{
    bmDir="$HOME/.config/lf/session-bookmarks"

    if [ ! -d "$bmDir" ]; then
        mkdir "$bmDir"
    fi

    if [ ! -d "$bmDir/$id/" ]; then
        mkdir "$bmDir/$id"
        touch "$bmDir/$id/bookmarks"
        touch "$bmDir/$id/index"
    fi

    currLoc=""
    if [ ! -d "$f" ]; then
        currLoc=$(dirname "$f")
    else
        currLoc="$f"
    fi

    if ! grep "$currLoc" "$bmDir/$id/bookmarks"; then
        echo "$currLoc" >> "$bmDir/$id/bookmarks"
        echo "Temp bookmark created: $currLoc"
    else
        echo "Bookmark already exists: $currLoc"
    fi
}}

cmd cycle-session-bookmarks %{{
    bmDir="$HOME/.config/lf/session-bookmarks"

    if [ ! -d "$bmDir/$id" ]; then
        echo "No current bookmarks"
        exit 0;
    fi

    lines=$(wc -l "$bmDir/$id/bookmarks" | awk -F " " '{print $1}')
    index=$(cat "$bmDir/$id/index")

    if [ "$index" == "" ]; then
        index=0
    fi

    if [ "$1" == "-n" ]; then
        index=$((++index))
        if ((index > lines - 1)); then
            index=0
        fi
    fi
    if [ "$1" == "-b" ]; then
        index=$((--index))
        if ((index < 0)); then
            index=$((lines - 1))
        fi
    fi

    echo "$index" > "$bmDir/$id/index"

    currLine="0"
    while read line; do
        if ((currLine == index)); then
            lf -remote "send $id cd $line"
            echo "Session Bookmark: $((currLine + 1))"
            exit 0
        fi
        ((++currLine))
    done < "$bmDir/$id/bookmarks"
}}

cmd bookmarks-list !{{
    bmDir="$HOME/.config/lf/session-bookmarks"

    if [ ! -d "$bmDir/$id" ]; then
        echo "No current bookmarks"
        exit 0
    fi

    id="$id"
    currLine="1"
    while read line; do
        echo "Session Bookmark $((currLine)): $line"
        ((++currLine))
    done < "$bmDir/$id/bookmarks"
}}

cmd fn-add %{{
    printf "Directory or file name: "
    read ans
    for arg in $ans; do
        if [ ${arg:(-1)} == "/" ]; then
            mkdir "$arg"
        else
            touch "$arg"
        fi
    done
}}

cmd fn-trash %{{
    # $fx uses \n as a default separator.  This works because I set the
    # separator to " "
    for arg in $fx; do
        trash-put -v "$arg"
    done
}}

cmd wp %{{
    printf "Change wallpaper on monitor # (1 or 2): "
    read monitor

    if [ "$monitor" == "1" ]; then
        nitrogen --head=0 --save --set-zoom-fill "$f"
        exit 0
    fi

    if [ "$monitor" == "2" ]; then
        nitrogen --head=1 --save --set-zoom-fill "$f"
        exit 0
    fi
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}



